// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;

namespace CryptoPriceTracker
{
	public partial class CryptoPriceViewController : UIViewController
	{
		public CryptoPriceViewController (IntPtr handle) : base (handle)
		{
		}                               

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            // Using Apple native API for now
            var apiUrl = new NSUrl("https://min-api.cryptocompare.com/data/price?fsym=BTC&tsyms=USD,JPY,EUR,CAD");
           
            NSUrlSessionDataTask dataTask = NSUrlSession.SharedSession.CreateDataTask(apiUrl,
                new NSUrlSessionResponse((/*NSData */data, /* NSUrlResponse */ response, /* NSError */ error) => {
                    Console.WriteLine("DataTask completed");
                    if (error == null)
                    {
                        if (response is NSHttpUrlResponse httpResponse)
                        {
                            if (httpResponse.StatusCode == 200 && data != null)
                            {
                                try
                                {
                                    // Need to decode the data now
                                    // https://docs.microsoft.com/en-us/dotnet/api/Foundation.NSJsonSerialization?view=xamarin-ios-sdk-12
                                    NSError parsingError;
                                    var json = NSJsonSerialization.Deserialize(data, default(NSJsonReadingOptions), out parsingError);
                                    if (json is NSDictionary jsonDict)
                                    {
                                        if (jsonDict.ContainsKey(NSString.FromObject("CAD")))
                                        {
                                            if (jsonDict["CAD"] is NSNumber cadNumber)
                                            {
                                                Console.WriteLine(cadNumber.DoubleValue);
                                            }

                                            if (jsonDict["EUR"] is NSNumber eurNumber)
                                            {
                                                Console.WriteLine(eurNumber.DoubleValue);
                                            }
                                        }
                                    }

                                }
                                catch (Exception e)
                                {
                                    Console.Error.WriteLine(e.ToString());
                                }
                            }
                            else
                            {
                                Console.Error.WriteLine($"Bad response code: {httpResponse.StatusCode}");
                            }
                        }
                        else
                        {
                            Console.Error.WriteLine("Unknown response type");
                        }
                    }
                    else
                    {
                        Console.Error.WriteLine(error.ToString());
                    }
                }));

            // Actually execute the task.
            dataTask.Resume();
        }
    }
}
