// This file has been autogenerated from a class added in the UI designer.

using System;
using CoreFoundation;
using Foundation;
using UIKit;

namespace CryptoPriceTracker
{
	public partial class CryptoPriceViewController : UIViewController
	{
		public CryptoPriceViewController (IntPtr handle) : base (handle)
		{
		}                               

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            UpdatePrices();
        }

        partial void refreshTapped(NSObject sender)
        {
            UpdatePrices();
        }

        /// <summary>
        /// Implements the number of it 
        /// </summary>
        void UpdatePrices()
        {
            // Using Apple native API for now
            var apiUrl = new NSUrl("https://min-api.cryptocompare.com/data/price?fsym=BTC&tsyms=USD,JPY,EUR,CAD");

            NSUrlSessionDataTask dataTask = NSUrlSession.SharedSession.CreateDataTask(apiUrl,
                new NSUrlSessionResponse((/*NSData */data, /* NSUrlResponse */ response, /* NSError */ error) => {
                    Console.WriteLine("DataTask completed");
                    if (error == null)
                    {
                        if (response is NSHttpUrlResponse httpResponse)
                        {
                            if (httpResponse.StatusCode == 200 && data != null)
                            {
                                try
                                {
                                    // Need to decode the data now
                                    // https://docs.microsoft.com/en-us/dotnet/api/Foundation.NSJsonSerialization?view=xamarin-ios-sdk-12
                                    NSError parsingError;
                                    var json = NSJsonSerialization.Deserialize(data, default(NSJsonReadingOptions), out parsingError);
                                    if (json is NSDictionary jsonDict)
                                    {
                                        // Need to update the UI thread here.
                                        DispatchQueue.MainQueue.DispatchAsync(() =>
                                        {
                                            try
                                            {
                                                if (jsonDict.ContainsKey(NSString.FromObject("USD")) && jsonDict["USD"] is NSNumber usdNumber)
                                                {
                                                    priceLabel.Text = $"${usdNumber.DoubleValue:0.00}";
                                                    priceLabel.TextColor = UIColor.Black;
                                                }
                                            }
                                            catch (Exception e)
                                            {
                                                priceLabel.Text = "Error";
                                                priceLabel.TextColor = UIColor.Red;
                                            }

                                            try
                                            {

                                                if (jsonDict.ContainsKey(NSString.FromObject("CAD")) && jsonDict["CAD"] is NSNumber cadNumber)
                                                {
                                                    firstCurrencyLabel.Text = $"CAD: ${cadNumber.DoubleValue:0.00}";
                                                    firstCurrencyLabel.TextColor = UIColor.Black;
                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                firstCurrencyLabel.Text = "Error";
                                                firstCurrencyLabel.TextColor = UIColor.Red;
                                            }

                                            try
                                            {
                                                if (jsonDict.ContainsKey(NSString.FromObject("EUR")) && jsonDict["EUR"] is NSNumber eurNumber)
                                                {
                                                    secondCurrencyLabel.Text = $"EUR: \u20AC{eurNumber.DoubleValue:0.00}";
                                                    secondCurrencyLabel.TextColor = UIColor.Black;
                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                secondCurrencyLabel.Text = "Error";
                                                secondCurrencyLabel.TextColor = UIColor.Red;
                                            }
                                        });
                                    }

                                }
                                catch (Exception e)
                                {
                                    Console.Error.WriteLine(e.ToString());
                                }
                            }
                            else
                            {
                                Console.Error.WriteLine($"Bad response code: {httpResponse.StatusCode}");
                            }
                        }
                        else
                        {
                            Console.Error.WriteLine("Unknown response type");
                        }
                    }
                    else
                    {
                        Console.Error.WriteLine(error.ToString());
                    }
                }));

            // Actually execute the task.
            dataTask.Resume();
        }
    }
}
